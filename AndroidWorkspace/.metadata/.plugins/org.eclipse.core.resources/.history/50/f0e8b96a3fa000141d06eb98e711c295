<!doctype html>
<html>
<head>
	<style type='text/css'>
		html { font-family:Helvetica; color:#222; }
		h1 { color:steelblue; font-size:24px; margin-top:24px; }
		button { margin:0 3px 10px; font-size:12px; }
		.logLine { border-bottom:1px solid #ccc; padding:4px 2px; font-family:courier; font-size:11px; }
	</style>
</head>
<body>
    <h1>JSBridge Demo</h1>
    <script>
        window.onerror = function(err) {
            log('window.onerror: ' + err)
        }

        function connectJSBridge(callback) {
            if (window.JSBridge) {
                callback(JSBridge)
            } else {
                document.addEventListener('JSBridgeReady', function() {
                    callback(JSBridge)
                }, false)
            }
        }

        connectJSBridge(function(bridge) {
            var uniqueId = 1
            function log(message, data) {
                var log = document.getElementById('log')
                var el = document.createElement('div')
                el.className = 'logLine'
                el.innerHTML = uniqueId++ + '. ' + message + ':<br/>' + JSON.stringify(data)
                if (log.children.length) { log.insertBefore(el, log.children[0]) }
                else { log.appendChild(el) }
            }
            bridge.init(function(message, responseCallback) {
                log('JS got a message', message)
                var data = { 'Javascript Responds':'Wee!' }
                log('JS responding with', data)
                responseCallback(data)
            })

            bridge.registerEvent('testJavascriptHandler', function(data, responseCallback) {
                log('ObjC called testJavascriptHandler with', data)
                var responseData = { 'Javascript Says':'Right back atcha!' }
                log('JS responding with', responseData)
                responseCallback(responseData)
            })

            window.sendMessage = function() {
                var data = 'Hello from JS button';
                log('JS sending message', data);
                bridge.send(null, data, function(responseData) {
                    log('JS got response', responseData);
                });
            }
            window.sendEvent = function() {
                log('JS calling handler "TestAPIOne.testNativeEvent"');
                bridge.send('TestAPIOne.testNativeEvent', {'foo': 'bar'}, function(response) {
                    log('JS got response', response);
                });
            };
            window.showMap = function() {
                log('JS calling handler "Map.show"');
                bridge.send('Map.show', {
                    position:{x:20,y:400,width:400,height:400},
                    mapPoints:[
                        {
                            type : "address",
                            address:"1000 Polaris Pkwy, Columbus, OH 43240"
                        },
                        {
                            type : "address",
                            address:"1060 Polaris Pkwy, Columbus, OH 43240"
                        },
                        {
                            type : "location",
                            location : {
                               latitude : 40.147979,
                               longitude : -82.989169
                            }
                        }
                    ]
                    },
                    function(response){log('JS got response from Map.show', response);}
                );
            };
            window.hideMap = function() {
                log('JS calling handler "Map.hide"');
                bridge.send('Map.hide', null,function(response){log('JS got response from Map.hide', response);});
            };
                        
            window.startTrackingLocation = function() {
                log('JS calling handler "Location.startTracking"');
                log('JS got startTrackingLocation as "',bridge.callAPI('Location.startTracking', null,null));
            };
            window.getCurrentLocation = function() {
                log('JS calling handler "Location.getCurrentLocation"');
                log('JS got getCurrentLocation as "',bridge.callAPI('Location.getCurrentLocation', null,null));
            };
            window.stopTrackingLocation = function() {
                log('JS calling handler "Location.stopTracking"');
                log('JS got stopTrackingLocation as "',bridge.callAPI('Location.stopTracking', null,null));
            };
            window.getLocationDetails = function() {
                var address = document.getElementById('addressID').value;
                var location = document.getElementById('locationID').value;
                var data = {};
                if((address != null) && (address != "")) data["address"] = address;
                if((location != null) && (location != "")) {
                    var loc = location.split(",");
                    data["location"] = { latitude: loc[0], longitude:loc[1]};
                }
                log('JS calling handler "Location.getDetails with data"',data);
                bridge.send('Location.getDetails', data,function(response){log('JS got response from Location.getDetails', response);});
            };
        });

        function testLogCallBack(c) {
            console.log("Callback Param: "+JSON.stringify(c));
            document.getElementById("responseID1").innerText = JSON.stringify(c);
        }
        function testUpdateRequest(str) {
            str = ((str)?(str):(""));
            console.log("Request: ",str);
            document.getElementById("requestID").innerText = str;
            document.getElementById("responseID1").innerText = "";
            document.getElementById("responseID2").innerText = "";
        }
        function testUpdateReturnValue(str) {
            str = ((str)?(str):(""));
            console.log("Returned Value: ",str);
            document.getElementById("responseID2").innerText = str;
        }
        function testUnSupported() {
            testUpdateRequest('JSBridge.callAPI("Hello.Unsupported")');
            testUpdateReturnValue(JSBridge.callAPI("Hello.Unsupported"));
        }
        function testUnSupportedCB() {
            testUpdateRequest('JSBridge.callAPI("Hello.UnsupportedCB")');
            testUpdateReturnValue(JSBridge.callAPI("Hello.UnsupportedCB",{"un":"un Value"},testLogCallBack));
        }
        function testOne() {
            testUpdateRequest('JSBridge.callAPI("TestAPIOne.APIOne")');
            testUpdateReturnValue(JSBridge.callAPI("TestAPIOne.APIOne"));
        }
        function testTwo() {
            testUpdateRequest('JSBridge.callAPI("TestAPIOne.APITwo",{"t1":"t1 Value"})');
            testUpdateReturnValue(JSBridge.callAPI("TestAPIOne.APITwo",{"t1":"t1 Value"}));
        }
        function testThree() {
            testUpdateRequest('JSBridge.callAPI("TestAPIOne.APIThree",{"t1":"t1 Value"})');
            testUpdateReturnValue(JSBridge.callAPI("TestAPIOne.APIThree",{"t1":"t1 Value"}));
        }
        function testFour() {
            testUpdateRequest('JSBridge.callAPI("TestAPIOne.APIFour",{"t1":"t1 Value"},testLogCallBack)');
            testUpdateReturnValue(JSBridge.callAPI("TestAPIOne.APIFour",{"t1":"t1 Value"},testLogCallBack));
        }
        function testFive() {
            testUpdateRequest('JSBridge.callAPI("TestAPIOne.APIFive",{"t1":"t1 Value"},testLogCallBack)');
            testUpdateReturnValue(JSBridge.callAPI("TestAPIOne.APIFive",{"t1":"t1 Value"},testLogCallBack));
        }
        function testSix() {
            testUpdateRequest('JSBridge.callAPI("TestAPIOne.APISix",{"t1":"t1 Value"},testLogCallBack)');
            testUpdateReturnValue(JSBridge.callAPI("TestAPIOne.APISix",{"t1":"t1 Value"},testLogCallBack));
        }
        function testSeven() {
            testUpdateRequest('JSBridge.callAPI("TestAPIOne.APISeven",{"t1":"t1 Value"},testLogCallBack)');
            testUpdateReturnValue(JSBridge.callAPI("TestAPIOne.APISeven",{"t1":"t1 Value"},testLogCallBack));
        }
    </script>
    <button type="button" class="btn btn-primary" onclick="testUnSupported()">UnSupported</button>
    <button type="button" class="btn btn-primary" onclick="testUnSupportedCB()">UnSupportedCB</button>
    <br>
    <button type="button" class="btn btn-primary" onclick="testOne()">API1</button>
    <button type="button" class="btn btn-primary" onclick="testTwo()">API2</button>
    <button type="button" class="btn btn-primary" onclick="testThree()">API3</button>
    <button type="button" class="btn btn-primary" onclick="testFour()">API4</button>
    <button type="button" class="btn btn-primary" onclick="testFive()">API5</button>
    <button type="button" class="btn btn-primary" onclick="testSix()">API6</button>
    <button type="button" class="btn btn-primary" onclick="testSeven()">API7</button>
    <div>
        <b>Request:</b><div id="requestID" style="margin-left:20px;"></div>
        <b>Response:</b><br>
        <b style="margin-left:20px;">Callback Param (if any): </b><div id="responseID1" style="margin-left:40px;"></div>
        <b style="margin-left:20px;">Returned Value (if any): </b><div id="responseID2" style="margin-left:40px;"></div>
    </div>
    <br>
    <button type="button" class="btn btn-primary" onclick="sendMessage()">Send message to ObjC</button>
    <button type="button" class="btn btn-primary" onclick="sendEvent()">Fire TestAPIOne.testNativeEvent</button>
    <br>
    <button type="button" class="btn btn-primary" onclick="showMap()">Show Map</button>
    <button type="button" class="btn btn-primary" onclick="hideMap()">Hide Map</button>
    <br>
    <button type="button" class="btn btn-primary" onclick="startTrackingLocation()">Start Location</button>
    <button type="button" class="btn btn-primary" onclick="getCurrentLocation()">Get Location</button>
    <button type="button" class="btn btn-primary" onclick="stopTrackingLocation()">Stop Location</button>
    <br>
    <button type="button" class="btn btn-primary" onclick="getLocationDetails()">Get Location Details</button>
    <input type="text" id="addressID" placeholder="Enter Addresss"/>
    <input type="text" id="locationID" placeholder="Enter Latitude,Longitude"/>
    <br>
    <div id='log'></div>
</body></html>
